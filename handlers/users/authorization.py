from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.types import Message, ReplyKeyboardRemove

from data.config import LANGUAGES
from handlers.users.create_group import choose_name
from keyboards.default import get_language_keyboard
from keyboards.default.menu import *
from states.states import UserRegistry, CreateGroup, JoinToGroup, Subscribe
from loader import _, dp
from utils.db_api.db_commands import DBCommands


@dp.message_handler(CommandStart(), state="*")
async def start(message: Message, state: FSMContext):
    await state.reset_state()
    group_id = await DBCommands.select_user_in_group_id(message.from_user.id)
    user = await DBCommands.get_user(message.from_user.id)
    if user is not None and user.subscribe == 0:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        await message.answer(text=_("‚ö†Ô∏è–í–∞—à–µ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É"), reply_markup=keyboard.add(_("üé´–ü–û–î–ü–ò–°–ö–ê")))
        await state.set_state(Subscribe.subscribe)
    elif await DBCommands.get_group_now(user_id=message.from_user.id, group_id=group_id) is True:
        group = await DBCommands.get_group_from_id(group_id=group_id)
        if group.start == 0:
            await message.answer(_("üì±–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), reply_markup=menu_for_create())
        else:
            await message.answer(_("üì±–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), reply_markup=menu_for_create_without_start())
        await state.set_state(CreateGroup.choose)
    elif await DBCommands.get_user_from_table_member(message.from_user.id, group_id=group_id):
        await message.answer(_("üì±–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), reply_markup=menu_for_join())
        await state.set_state(JoinToGroup.choose)
    elif user is not None and user.name is not None:
        await message.answer(_("üì±–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), reply_markup=(menu()))
        await state.set_state(UserRegistry.choose)
    else:
        await message.answer(_("üôÇ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ‚Äú–ß–Å–†–ù–£–Æ –ö–ê–°–°–£‚Äù.\n" 
                "üòâ–ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –≤–∞—à ‚ÄúGa‚Äôp‚Äù –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–º –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º!\n\n" 
                "üôÇ‚ÄúQORA KASSA‚Äù ga xush kelibsiz.\n"
                "üòâBiz sizga ‚ÄúGa‚Äôp‚Äù ni qulayroq va xavfsizroq qilishingizga yordam beramiz!\n\n"
                "üá∑üá∫–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –≤–∞–º —è–∑—ã–∫!\n" 
                "üá∫üáø–é–∑–∏–Ω–≥–∏–∑–≥–∞ “õ—É–ª–∞–π —Ç–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥!\n"), reply_markup=get_language_keyboard())
        await state.update_data(user_id=message.from_user.id, nickname=message.from_user.username)
        await state.set_state(UserRegistry.user_name)


@dp.message_handler(text=[button_text for button_text in LANGUAGES.keys()], state=UserRegistry.user_name)
async def authorization_lang(message: Message, state: FSMContext):
    language = LANGUAGES[message.text]
    user = await DBCommands.get_user(message.from_user.id)
    if not user:
        await DBCommands.add_language(message.from_user.id, language)
    if user:
        await DBCommands.language_update(message.from_user.id, language)
    if message.text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
        await message.answer("üë®‚Äçüíª–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–µ –§–ò–û, –ø—Ä–∏–º–µ—Ä: (–®—É–∫—É—Ä–æ–≤ –ù—É—Ä–±–µ–∫ –¢—É—Ä–æ–±–æ–≤–∏—á)",
                             reply_markup=ReplyKeyboardRemove())
    elif message.text == "üá∫üáø –é–∑–±–µ–∫ —Ç–∏–ª–∏":
        await message.answer("üë®‚ÄçüíªIltimos, to'liq ismingizni kiriting, misol: (Shukurov Nurbek Turobovich)",
                             reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("‚ùáÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫\n‚ùáÔ∏èTugmalardan birini tanlang")
        await state.set_state(UserRegistry.user_name)
    await state.set_state(UserRegistry.user_phone_and_sms)


# @dp.message_handler(state=UserRegistry.user_phone)
# async def authorization_name(message: Message, state: FSMContext):
#     contact_keyboard = ReplyKeyboardMarkup(
#         keyboard=[
#             [KeyboardButton(text=_("‚òéÔ∏è–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç"), request_contact=True)],
#         ],
#         resize_keyboard=True
#     )
#     await state.update_data(name=message.text)
#     await message.answer(_("üì≤–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º,–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"), reply_markup=contact_keyboard)
#     await state.set_state(UserRegistry.user_sms)


@dp.message_handler(state=UserRegistry.user_phone_and_sms)
async def authorization_phone(message: Message, state: FSMContext):
    contact_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=_("‚òéÔ∏è–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç"), request_contact=True)],
        ],
        resize_keyboard=True
    )
    await state.update_data(name=message.text)
    await message.answer(_("–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º'!\n"
                           "‚ö†Ô∏è–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –Ω–∞ —Å–µ–±—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è!\n"
                           "üìï–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ:"))
    await message.answer_document(open("–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ï_–°–û–ì–õ–ê–®–ï–ù–ò–ï_–ß–ïÃà–†–ù–ê–Ø_–ö–ê–°–°–ê.docx", 'rb'))
    await state.set_state(UserRegistry.user_approve)


@dp.message_handler(content_types=types.ContentType.CONTACT, state=UserRegistry.user_approve)
async def approve(message: Message, state: FSMContext):
    # if message.text == "‚úÖ":
    data = await state.get_data()
    await DBCommands.create_user(user_id=data.get("user_id"),
                                 name=data.get("name"),
                                 nickname=data.get("nickname"),
                                 phone=message.contact.phone_number,
                                 accept=1)
    await message.answer(_("üéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!\n" 
                  "–í—ã–±–µ—Ä–∏—Ç–µ üë•-—Å–æ–∑–¥–∞—Ç—å –∫—Ä—É–≥- –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –∫—Ä—É–≥,\n" 
                  "–∏–ª–∏ üë§-–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è- –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫—Ä—É–≥—É.\n"), reply_markup=menu())
    await state.set_state(UserRegistry.choose)

@dp.message_handler(state=UserRegistry.choose)
async def choose_menu(message: Message, state: FSMContext):
    group = await DBCommands.get_group_from_id(await DBCommands.select_user_in_group_id(message.from_user.id))
    if message.text in ["üë•–°–æ–∑–¥–∞—Ç—å –∫—Ä—É–≥", "üë•Doira yaratish"]:
        await choose_name(message, state)
    elif message.text in ["üë§–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", "üë§Qo'shilish"]:
        await message.answer(_("üë§–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–π –∫—Ä—É–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"), reply_markup=join_choose())
        await state.set_state(JoinToGroup.join)
    elif message.text in ["‚¨ÖÔ∏è–ù–∞–∑–∞–¥", "‚¨ÖÔ∏èOrqaga"]:
        if group.start == 0:
            await message.answer(_("üì±–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), reply_markup=menu_for_create())
        else:
            await message.answer(_("üì±–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), reply_markup=menu_for_create_without_start())
        await state.set_state(CreateGroup.choose)
    elif message.text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚¨ÖÔ∏è Orqaga"]:
        await message.answer(_("üì±–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), reply_markup=menu_for_join())
        await state.set_state(JoinToGroup.choose)
    else:
        if group.start == 0:
            await message.answer(_("‚ùáÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫"), reply_markup=menu_for_create())
        else:
            await message.answer(_("‚ùáÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫"), reply_markup=menu_for_create_without_start())
        await state.set_state(UserRegistry.choose)



